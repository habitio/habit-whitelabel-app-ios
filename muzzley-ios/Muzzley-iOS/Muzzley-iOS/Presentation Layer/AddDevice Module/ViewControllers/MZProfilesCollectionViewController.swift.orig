//
//  MZProfilesCollectionViewController.swift
//  Muzzley-iOS
//
//  Created by Cristina Lopes on 04/11/16.
//  Copyright Â© 2016 Muzzley. All rights reserved.
//

private let reuseIdentifier = "MZProfileServiceCollectionCell"

@objc protocol MZProfilesCollectionViewControllerDelegate: NSObjectProtocol
{
    func channelProfilesViewControllerDidCancelAction(_ viewController : MZProfilesCollectionViewController);
    func channelProfilesViewController(_ viewController : MZProfilesCollectionViewController, didSelectProfile channelProfile : MZChannelTemplate);
	func getProfilesFinished()
	func getProfilesFinishedWithError()

}

class MZProfilesCollectionViewController: UICollectionViewController
{
	var loadingView = MZLoadingView()
    var delegate: MZProfilesCollectionViewControllerDelegate?
    var interactor: MZChannelTemplatesInteractor = MZChannelTemplatesInteractor()
	var channelTemplatesArray : NSArray = NSArray()

	
	override func viewWillDisappear(_ animated: Bool)
	{
		super.viewWillDisappear(animated)
		updateLoadingStatus(false)
	}
	
    override func viewDidLoad()
    {
        super.viewDidLoad()
        MZAnalyticsInteractor.deviceAddStartEvent()
		self.loadingView.updateLoadingStatus(true, container: self.view)
	
        self.navigationController?.setNavigationBarHidden(true, animated: false)
        self.view.backgroundColor = UIColor.muzzleyDarkWhiteColor(withAlpha: 1)
        self.collectionView!.backgroundColor = UIColor.muzzleyDarkWhiteColor(withAlpha: 1)
        self.collectionView!.register(UINib(nibName: "MZProfileServiceCollectionCell", bundle: nil), forCellWithReuseIdentifier: reuseIdentifier)
        self.collectionView!.reloadData()
		
//		interactor.getProfiles { (result, error) in
//			if(error == nil)
//			{
//				self.channelTemplatesArray = (result as! NSDictionary).value(forKey: "profiles") as! NSArray
//				
//				self.getProfilesFinished()
//			}
//			else
//			{
//				self.getProfilesFinishedWithError()
//			}
//			
//			self.updateView()
//		}
        
        
        interactor.getChannelTemplates { (result, error) in
            print(result)
            if(error == nil)
            {
                self.channelTemplatesArray = NSArray()
                
                if let elements = (result as! NSDictionary).value(forKey: "elements") as? NSArray
                {
                    for element in elements
                    {
                        if let template = (element as! NSDictionary).value(forKey: "template")
                        {
                            print(template)
                            self.channelTemplatesArray.adding(template)
                        }
                    }
                }
                
                self.getProfilesFinished()
            }
            else
            {
                self.getProfilesFinishedWithError()
            }
            
            self.updateView()
        }

    }

	
	override func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}
	



    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
    {
        let bundleID = Bundle.main.bundleIdentifier
		if MZThemeManager.sharedInstance.appInfo(MZThemeAppInfo.namespace) as! String == "pt.vodafone.monitor" &&
            (bundleID?.range(of: ".DEV") == nil && bundleID?.range(of: ".DEBUGPROD") == nil )
		{
			return 0
		}
        return self.channelTemplatesArray.count
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath) -> CGSize
    {
        let flowLayout : UICollectionViewFlowLayout = collectionViewLayout as! UICollectionViewFlowLayout
        let sectionInsetsHSpacing = flowLayout.sectionInset.left + flowLayout.sectionInset.right
        let minimumInteritemSpacing = flowLayout.minimumInteritemSpacing
        let twoItemWidth = collectionView.bounds.size.width - sectionInsetsHSpacing - minimumInteritemSpacing
        let oneItemWidth = twoItemWidth * 0.5
		return CGSize(width: oneItemWidth, height: oneItemWidth);
    }
	
	override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
	
        let aCell : MZProfileServiceCollectionCell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! MZProfileServiceCollectionCell
        
        aCell.uiImage.image = nil
        aCell.uiLabel.text = ""


<<<<<<< Updated upstream
        let channelProfile : NSDictionary = profilesArray[indexPath.row] as! NSDictionary
        if let name = channelProfile[MZChannelTemplateKeyName] as? String
=======
        let channelProfile : NSDictionary = channelTemplatesArray[indexPath.row] as! NSDictionary
        if let name = channelProfile[MZChannelProfileKeyName] as? String
>>>>>>> Stashed changes
        {
            aCell.uiLabel.text = name
        }
        
        if let image = channelProfile[MZChannelTemplateKeyPhotoUrlSquared] as? String
        {
			if(!image.isEmpty)
			{
				aCell.uiImage.setImageWith(URL(string: image)!)
			}
        }

        return aCell
    }

	override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
	
		updateLoadingStatus(true)
        let dataSource : NSArray = self.channelTemplatesArray as! NSArray
        let channelProfileDict = dataSource[indexPath.row] as! NSDictionary
        
        let channelProfile = MZChannelTemplate(dictionary: channelProfileDict)
        MZAnalyticsInteractor.deviceAddSelectDeviceEvent(channelProfile.identifier)

        self.delegate?.channelProfilesViewController(self, didSelectProfile: channelProfile)
        
    }
    
    func updateLoadingStatus(_ isLoading : Bool)
    {
        self.loadingView.updateLoadingStatus(isLoading, container: self.view)
    }
    
    func updateView()
    {
        self.loadingView.updateLoadingStatus(false, container: self.view)
        self.collectionView!.reloadData()
    }
	
	func getProfilesFinished()
	{
		self.delegate!.getProfilesFinished()
	}
	
	func getProfilesFinishedWithError()
	{
		self.delegate!.getProfilesFinishedWithError()
	}
	
    func setTableViewInteractionEnabled(_ enabled:Bool)
    {
        self.collectionView!.isUserInteractionEnabled = enabled
    }
}

